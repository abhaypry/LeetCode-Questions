/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        // Final answer to store level-wise nodes in zigzag order
        vector<vector<int>> ans;

        // Base case: if the tree is empty
        if (!root) return ans;

        // Queue for BFS traversal (level-order)
        queue<TreeNode*> q;
        q.push(root);

        // Boolean flag to track direction: true = left to right, false = right to left
        bool leftToRight = true;

        // Perform level order traversal
        while (!q.empty()) {
            int size = q.size();                // Number of nodes in the current level
            vector<int> level(size);            // Temporary list to store current level nodes

            for (int i = 0; i < size; i++) {
                TreeNode* node = q.front();
                q.pop();

                // Choose the correct index based on current traversal direction
                int index = leftToRight ? i : (size - 1 - i);
                level[index] = node->val;

                // Push the child nodes for the next level
                if (node->left) q.push(node->left);
                if (node->right) q.push(node->right);
            }

            // Flip the direction for the next level
            leftToRight = !leftToRight;

            // Store the processed level in the final result
            ans.push_back(level);
        }

        return ans;
    }
};
